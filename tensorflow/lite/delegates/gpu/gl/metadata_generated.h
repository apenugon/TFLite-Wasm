// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATA_TFLITE_GPU_GL_DATA_H_
#define FLATBUFFERS_GENERATED_METADATA_TFLITE_GPU_GL_DATA_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "workgroups_generated.h"

namespace tflite {
namespace gpu {
namespace gl {
namespace data {

struct FlowMetadata;
struct FlowMetadataBuilder;
struct FlowMetadataT;

struct FlowMetadataT : public flatbuffers::NativeTable {
  typedef FlowMetadata TableType;
  std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT> workgroups{};
};

struct FlowMetadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FlowMetadataT NativeTableType;
  typedef FlowMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORKGROUPS = 4
  };
  const tflite::gpu::gl::data::CustomWorkgroups *workgroups() const {
    return GetPointer<const tflite::gpu::gl::data::CustomWorkgroups *>(VT_WORKGROUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WORKGROUPS) &&
           verifier.VerifyTable(workgroups()) &&
           verifier.EndTable();
  }
  FlowMetadataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FlowMetadataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FlowMetadata> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FlowMetadataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FlowMetadataBuilder {
  typedef FlowMetadata Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_workgroups(flatbuffers::Offset<tflite::gpu::gl::data::CustomWorkgroups> workgroups) {
    fbb_.AddOffset(FlowMetadata::VT_WORKGROUPS, workgroups);
  }
  explicit FlowMetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FlowMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FlowMetadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlowMetadata> CreateFlowMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::CustomWorkgroups> workgroups = 0) {
  FlowMetadataBuilder builder_(_fbb);
  builder_.add_workgroups(workgroups);
  return builder_.Finish();
}

flatbuffers::Offset<FlowMetadata> CreateFlowMetadata(flatbuffers::FlatBufferBuilder &_fbb, const FlowMetadataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FlowMetadataT *FlowMetadata::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FlowMetadataT>(new FlowMetadataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FlowMetadata::UnPackTo(FlowMetadataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = workgroups(); if (_e) _o->workgroups = std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<FlowMetadata> FlowMetadata::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FlowMetadataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFlowMetadata(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FlowMetadata> CreateFlowMetadata(flatbuffers::FlatBufferBuilder &_fbb, const FlowMetadataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FlowMetadataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _workgroups = _o->workgroups ? CreateCustomWorkgroups(_fbb, _o->workgroups.get(), _rehasher) : 0;
  return tflite::gpu::gl::data::CreateFlowMetadata(
      _fbb,
      _workgroups);
}

inline const tflite::gpu::gl::data::FlowMetadata *GetFlowMetadata(const void *buf) {
  return flatbuffers::GetRoot<tflite::gpu::gl::data::FlowMetadata>(buf);
}

inline const tflite::gpu::gl::data::FlowMetadata *GetSizePrefixedFlowMetadata(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tflite::gpu::gl::data::FlowMetadata>(buf);
}

inline const char *FlowMetadataIdentifier() {
  return "AFFL";
}

inline bool FlowMetadataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FlowMetadataIdentifier());
}

inline bool VerifyFlowMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tflite::gpu::gl::data::FlowMetadata>(FlowMetadataIdentifier());
}

inline bool VerifySizePrefixedFlowMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tflite::gpu::gl::data::FlowMetadata>(FlowMetadataIdentifier());
}

inline void FinishFlowMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::FlowMetadata> root) {
  fbb.Finish(root, FlowMetadataIdentifier());
}

inline void FinishSizePrefixedFlowMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::FlowMetadata> root) {
  fbb.FinishSizePrefixed(root, FlowMetadataIdentifier());
}

inline std::unique_ptr<tflite::gpu::gl::data::FlowMetadataT> UnPackFlowMetadata(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tflite::gpu::gl::data::FlowMetadataT>(GetFlowMetadata(buf)->UnPack(res));
}

inline std::unique_ptr<tflite::gpu::gl::data::FlowMetadataT> UnPackSizePrefixedFlowMetadata(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tflite::gpu::gl::data::FlowMetadataT>(GetSizePrefixedFlowMetadata(buf)->UnPack(res));
}

}  // namespace data
}  // namespace gl
}  // namespace gpu
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_METADATA_TFLITE_GPU_GL_DATA_H_
