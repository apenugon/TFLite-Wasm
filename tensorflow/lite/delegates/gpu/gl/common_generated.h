// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_
#define FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace tflite {
namespace gpu {
namespace gl {
namespace data {

struct Uint3;
struct Uint3Builder;
struct Uint3T;

struct Uint2;
struct Uint2Builder;
struct Uint2T;

struct Uint1;
struct Uint1Builder;
struct Uint1T;

struct Uint3T : public flatbuffers::NativeTable {
  typedef Uint3 TableType;
  uint32_t x = 0;
  uint32_t y = 0;
  uint32_t z = 0;
};

struct Uint3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint3T NativeTableType;
  typedef Uint3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  uint32_t z() const {
    return GetField<uint32_t>(VT_Z, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           VerifyField<uint32_t>(verifier, VT_Y) &&
           VerifyField<uint32_t>(verifier, VT_Z) &&
           verifier.EndTable();
  }
  Uint3T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Uint3T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Uint3> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint3T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Uint3Builder {
  typedef Uint3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint3::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Uint3::VT_Y, y, 0);
  }
  void add_z(uint32_t z) {
    fbb_.AddElement<uint32_t>(Uint3::VT_Z, z, 0);
  }
  explicit Uint3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Uint3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint3> CreateUint3(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0,
    uint32_t y = 0,
    uint32_t z = 0) {
  Uint3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

flatbuffers::Offset<Uint3> CreateUint3(flatbuffers::FlatBufferBuilder &_fbb, const Uint3T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Uint2T : public flatbuffers::NativeTable {
  typedef Uint2 TableType;
  uint32_t x = 0;
  uint32_t y = 0;
};

struct Uint2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint2T NativeTableType;
  typedef Uint2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           VerifyField<uint32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
  Uint2T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Uint2T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Uint2> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint2T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Uint2Builder {
  typedef Uint2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint2::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Uint2::VT_Y, y, 0);
  }
  explicit Uint2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Uint2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint2> CreateUint2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0,
    uint32_t y = 0) {
  Uint2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

flatbuffers::Offset<Uint2> CreateUint2(flatbuffers::FlatBufferBuilder &_fbb, const Uint2T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Uint1T : public flatbuffers::NativeTable {
  typedef Uint1 TableType;
  uint32_t x = 0;
};

struct Uint1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint1T NativeTableType;
  typedef Uint1Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           verifier.EndTable();
  }
  Uint1T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Uint1T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Uint1> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint1T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Uint1Builder {
  typedef Uint1 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint1::VT_X, x, 0);
  }
  explicit Uint1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Uint1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint1>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint1> CreateUint1(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0) {
  Uint1Builder builder_(_fbb);
  builder_.add_x(x);
  return builder_.Finish();
}

flatbuffers::Offset<Uint1> CreateUint1(flatbuffers::FlatBufferBuilder &_fbb, const Uint1T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Uint3T *Uint3::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Uint3T>(new Uint3T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Uint3::UnPackTo(Uint3T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
}

inline flatbuffers::Offset<Uint3> Uint3::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint3T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUint3(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Uint3> CreateUint3(flatbuffers::FlatBufferBuilder &_fbb, const Uint3T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Uint3T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  return tflite::gpu::gl::data::CreateUint3(
      _fbb,
      _x,
      _y,
      _z);
}

inline Uint2T *Uint2::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Uint2T>(new Uint2T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Uint2::UnPackTo(Uint2T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
}

inline flatbuffers::Offset<Uint2> Uint2::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint2T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUint2(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Uint2> CreateUint2(flatbuffers::FlatBufferBuilder &_fbb, const Uint2T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Uint2T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  return tflite::gpu::gl::data::CreateUint2(
      _fbb,
      _x,
      _y);
}

inline Uint1T *Uint1::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Uint1T>(new Uint1T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Uint1::UnPackTo(Uint1T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
}

inline flatbuffers::Offset<Uint1> Uint1::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Uint1T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUint1(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Uint1> CreateUint1(flatbuffers::FlatBufferBuilder &_fbb, const Uint1T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Uint1T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  return tflite::gpu::gl::data::CreateUint1(
      _fbb,
      _x);
}

}  // namespace data
}  // namespace gl
}  // namespace gpu
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_
