// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKGROUPS_TFLITE_GPU_GL_DATA_H_
#define FLATBUFFERS_GENERATED_WORKGROUPS_TFLITE_GPU_GL_DATA_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace tflite {
namespace gpu {
namespace gl {
namespace data {

struct HardcodedWorkgroup;
struct HardcodedWorkgroupBuilder;
struct HardcodedWorkgroupT;

struct HardcodedWorkgroups;
struct HardcodedWorkgroupsBuilder;
struct HardcodedWorkgroupsT;

struct CustomWorkgroups;
struct CustomWorkgroupsBuilder;
struct CustomWorkgroupsT;

struct HardcodedWorkgroupT : public flatbuffers::NativeTable {
  typedef HardcodedWorkgroup TableType;
  std::unique_ptr<tflite::gpu::gl::data::Uint3T> size{};
  std::vector<uint32_t> node_indices{};
};

struct HardcodedWorkgroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HardcodedWorkgroupT NativeTableType;
  typedef HardcodedWorkgroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_NODE_INDICES = 6
  };
  const tflite::gpu::gl::data::Uint3 *size() const {
    return GetPointer<const tflite::gpu::gl::data::Uint3 *>(VT_SIZE);
  }
  const flatbuffers::Vector<uint32_t> *node_indices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_NODE_INDICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyOffset(verifier, VT_NODE_INDICES) &&
           verifier.VerifyVector(node_indices()) &&
           verifier.EndTable();
  }
  HardcodedWorkgroupT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HardcodedWorkgroupT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HardcodedWorkgroup> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HardcodedWorkgroupBuilder {
  typedef HardcodedWorkgroup Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(flatbuffers::Offset<tflite::gpu::gl::data::Uint3> size) {
    fbb_.AddOffset(HardcodedWorkgroup::VT_SIZE, size);
  }
  void add_node_indices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> node_indices) {
    fbb_.AddOffset(HardcodedWorkgroup::VT_NODE_INDICES, node_indices);
  }
  explicit HardcodedWorkgroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HardcodedWorkgroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HardcodedWorkgroup>(end);
    return o;
  }
};

inline flatbuffers::Offset<HardcodedWorkgroup> CreateHardcodedWorkgroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::Uint3> size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> node_indices = 0) {
  HardcodedWorkgroupBuilder builder_(_fbb);
  builder_.add_node_indices(node_indices);
  builder_.add_size(size);
  return builder_.Finish();
}

inline flatbuffers::Offset<HardcodedWorkgroup> CreateHardcodedWorkgroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::Uint3> size = 0,
    const std::vector<uint32_t> *node_indices = nullptr) {
  auto node_indices__ = node_indices ? _fbb.CreateVector<uint32_t>(*node_indices) : 0;
  return tflite::gpu::gl::data::CreateHardcodedWorkgroup(
      _fbb,
      size,
      node_indices__);
}

flatbuffers::Offset<HardcodedWorkgroup> CreateHardcodedWorkgroup(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HardcodedWorkgroupsT : public flatbuffers::NativeTable {
  typedef HardcodedWorkgroups TableType;
  std::string gpu_info{};
  std::vector<std::unique_ptr<tflite::gpu::gl::data::HardcodedWorkgroupT>> workgroups{};
};

struct HardcodedWorkgroups FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HardcodedWorkgroupsT NativeTableType;
  typedef HardcodedWorkgroupsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GPU_INFO = 4,
    VT_WORKGROUPS = 6
  };
  const flatbuffers::String *gpu_info() const {
    return GetPointer<const flatbuffers::String *>(VT_GPU_INFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>> *workgroups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>> *>(VT_WORKGROUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GPU_INFO) &&
           verifier.VerifyString(gpu_info()) &&
           VerifyOffset(verifier, VT_WORKGROUPS) &&
           verifier.VerifyVector(workgroups()) &&
           verifier.VerifyVectorOfTables(workgroups()) &&
           verifier.EndTable();
  }
  HardcodedWorkgroupsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HardcodedWorkgroupsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HardcodedWorkgroups> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HardcodedWorkgroupsBuilder {
  typedef HardcodedWorkgroups Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gpu_info(flatbuffers::Offset<flatbuffers::String> gpu_info) {
    fbb_.AddOffset(HardcodedWorkgroups::VT_GPU_INFO, gpu_info);
  }
  void add_workgroups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>>> workgroups) {
    fbb_.AddOffset(HardcodedWorkgroups::VT_WORKGROUPS, workgroups);
  }
  explicit HardcodedWorkgroupsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HardcodedWorkgroups> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HardcodedWorkgroups>(end);
    return o;
  }
};

inline flatbuffers::Offset<HardcodedWorkgroups> CreateHardcodedWorkgroups(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> gpu_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>>> workgroups = 0) {
  HardcodedWorkgroupsBuilder builder_(_fbb);
  builder_.add_workgroups(workgroups);
  builder_.add_gpu_info(gpu_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<HardcodedWorkgroups> CreateHardcodedWorkgroupsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *gpu_info = nullptr,
    const std::vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>> *workgroups = nullptr) {
  auto gpu_info__ = gpu_info ? _fbb.CreateString(gpu_info) : 0;
  auto workgroups__ = workgroups ? _fbb.CreateVector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>>(*workgroups) : 0;
  return tflite::gpu::gl::data::CreateHardcodedWorkgroups(
      _fbb,
      gpu_info__,
      workgroups__);
}

flatbuffers::Offset<HardcodedWorkgroups> CreateHardcodedWorkgroups(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CustomWorkgroupsT : public flatbuffers::NativeTable {
  typedef CustomWorkgroups TableType;
  std::vector<std::unique_ptr<tflite::gpu::gl::data::HardcodedWorkgroupsT>> hardcoded_workgroups{};
};

struct CustomWorkgroups FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CustomWorkgroupsT NativeTableType;
  typedef CustomWorkgroupsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HARDCODED_WORKGROUPS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>> *hardcoded_workgroups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>> *>(VT_HARDCODED_WORKGROUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HARDCODED_WORKGROUPS) &&
           verifier.VerifyVector(hardcoded_workgroups()) &&
           verifier.VerifyVectorOfTables(hardcoded_workgroups()) &&
           verifier.EndTable();
  }
  CustomWorkgroupsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CustomWorkgroupsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CustomWorkgroups> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CustomWorkgroupsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CustomWorkgroupsBuilder {
  typedef CustomWorkgroups Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hardcoded_workgroups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>>> hardcoded_workgroups) {
    fbb_.AddOffset(CustomWorkgroups::VT_HARDCODED_WORKGROUPS, hardcoded_workgroups);
  }
  explicit CustomWorkgroupsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CustomWorkgroups> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CustomWorkgroups>(end);
    return o;
  }
};

inline flatbuffers::Offset<CustomWorkgroups> CreateCustomWorkgroups(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>>> hardcoded_workgroups = 0) {
  CustomWorkgroupsBuilder builder_(_fbb);
  builder_.add_hardcoded_workgroups(hardcoded_workgroups);
  return builder_.Finish();
}

inline flatbuffers::Offset<CustomWorkgroups> CreateCustomWorkgroupsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>> *hardcoded_workgroups = nullptr) {
  auto hardcoded_workgroups__ = hardcoded_workgroups ? _fbb.CreateVector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>>(*hardcoded_workgroups) : 0;
  return tflite::gpu::gl::data::CreateCustomWorkgroups(
      _fbb,
      hardcoded_workgroups__);
}

flatbuffers::Offset<CustomWorkgroups> CreateCustomWorkgroups(flatbuffers::FlatBufferBuilder &_fbb, const CustomWorkgroupsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HardcodedWorkgroupT *HardcodedWorkgroup::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HardcodedWorkgroupT>(new HardcodedWorkgroupT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HardcodedWorkgroup::UnPackTo(HardcodedWorkgroupT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = size(); if (_e) _o->size = std::unique_ptr<tflite::gpu::gl::data::Uint3T>(_e->UnPack(_resolver)); }
  { auto _e = node_indices(); if (_e) { _o->node_indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->node_indices[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<HardcodedWorkgroup> HardcodedWorkgroup::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHardcodedWorkgroup(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HardcodedWorkgroup> CreateHardcodedWorkgroup(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HardcodedWorkgroupT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _size = _o->size ? CreateUint3(_fbb, _o->size.get(), _rehasher) : 0;
  auto _node_indices = _o->node_indices.size() ? _fbb.CreateVector(_o->node_indices) : 0;
  return tflite::gpu::gl::data::CreateHardcodedWorkgroup(
      _fbb,
      _size,
      _node_indices);
}

inline HardcodedWorkgroupsT *HardcodedWorkgroups::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HardcodedWorkgroupsT>(new HardcodedWorkgroupsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HardcodedWorkgroups::UnPackTo(HardcodedWorkgroupsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = gpu_info(); if (_e) _o->gpu_info = _e->str(); }
  { auto _e = workgroups(); if (_e) { _o->workgroups.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->workgroups[_i] = std::unique_ptr<tflite::gpu::gl::data::HardcodedWorkgroupT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<HardcodedWorkgroups> HardcodedWorkgroups::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHardcodedWorkgroups(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HardcodedWorkgroups> CreateHardcodedWorkgroups(flatbuffers::FlatBufferBuilder &_fbb, const HardcodedWorkgroupsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HardcodedWorkgroupsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _gpu_info = _o->gpu_info.empty() ? 0 : _fbb.CreateString(_o->gpu_info);
  auto _workgroups = _o->workgroups.size() ? _fbb.CreateVector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroup>> (_o->workgroups.size(), [](size_t i, _VectorArgs *__va) { return CreateHardcodedWorkgroup(*__va->__fbb, __va->__o->workgroups[i].get(), __va->__rehasher); }, &_va ) : 0;
  return tflite::gpu::gl::data::CreateHardcodedWorkgroups(
      _fbb,
      _gpu_info,
      _workgroups);
}

inline CustomWorkgroupsT *CustomWorkgroups::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CustomWorkgroupsT>(new CustomWorkgroupsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CustomWorkgroups::UnPackTo(CustomWorkgroupsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = hardcoded_workgroups(); if (_e) { _o->hardcoded_workgroups.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->hardcoded_workgroups[_i] = std::unique_ptr<tflite::gpu::gl::data::HardcodedWorkgroupsT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<CustomWorkgroups> CustomWorkgroups::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CustomWorkgroupsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCustomWorkgroups(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CustomWorkgroups> CreateCustomWorkgroups(flatbuffers::FlatBufferBuilder &_fbb, const CustomWorkgroupsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CustomWorkgroupsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _hardcoded_workgroups = _o->hardcoded_workgroups.size() ? _fbb.CreateVector<flatbuffers::Offset<tflite::gpu::gl::data::HardcodedWorkgroups>> (_o->hardcoded_workgroups.size(), [](size_t i, _VectorArgs *__va) { return CreateHardcodedWorkgroups(*__va->__fbb, __va->__o->hardcoded_workgroups[i].get(), __va->__rehasher); }, &_va ) : 0;
  return tflite::gpu::gl::data::CreateCustomWorkgroups(
      _fbb,
      _hardcoded_workgroups);
}

inline const tflite::gpu::gl::data::CustomWorkgroups *GetCustomWorkgroups(const void *buf) {
  return flatbuffers::GetRoot<tflite::gpu::gl::data::CustomWorkgroups>(buf);
}

inline const tflite::gpu::gl::data::CustomWorkgroups *GetSizePrefixedCustomWorkgroups(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tflite::gpu::gl::data::CustomWorkgroups>(buf);
}

inline const char *CustomWorkgroupsIdentifier() {
  return "AFWS";
}

inline bool CustomWorkgroupsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, CustomWorkgroupsIdentifier());
}

inline bool VerifyCustomWorkgroupsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tflite::gpu::gl::data::CustomWorkgroups>(CustomWorkgroupsIdentifier());
}

inline bool VerifySizePrefixedCustomWorkgroupsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tflite::gpu::gl::data::CustomWorkgroups>(CustomWorkgroupsIdentifier());
}

inline void FinishCustomWorkgroupsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::CustomWorkgroups> root) {
  fbb.Finish(root, CustomWorkgroupsIdentifier());
}

inline void FinishSizePrefixedCustomWorkgroupsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tflite::gpu::gl::data::CustomWorkgroups> root) {
  fbb.FinishSizePrefixed(root, CustomWorkgroupsIdentifier());
}

inline std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT> UnPackCustomWorkgroups(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT>(GetCustomWorkgroups(buf)->UnPack(res));
}

inline std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT> UnPackSizePrefixedCustomWorkgroups(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tflite::gpu::gl::data::CustomWorkgroupsT>(GetSizePrefixedCustomWorkgroups(buf)->UnPack(res));
}

}  // namespace data
}  // namespace gl
}  // namespace gpu
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_WORKGROUPS_TFLITE_GPU_GL_DATA_H_
